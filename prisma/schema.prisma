generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String    @id @default(uuid())
  password     String    @unique
  profileImage String    @unique
  userType     UserType  @default(customer)
  Customer     Customer? @relation(fields: [customerId], references: [id])
  customerId   String?
  Admin        Admin?    @relation(fields: [adminId], references: [id])
  adminId      String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  Booking      Booking[]
  Reviews      Reviews[]

  @@map("user")
}

model Customer {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String   @unique
  contactNo String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]

  @@map("customer")
}

model Admin {
  id                 String               @id @default(uuid())
  email              String               @unique
  name               String               @unique
  contactNo          String               @unique
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  User               User[]
  TravelDestinations TravelDestinations[]

  @@map("admin")
}

enum UserType {
  admin
  customer
  super_admin
}

model TravelDestinations {
  id          String        @id @default(uuid())
  image       String
  time        String        @unique
  price       Int
  destination String        @unique
  title       String
  ratting     Int           @default(0)
  Status      CurrentStatus @default(Available)
  adminId     String
  Admin       Admin?        @relation(fields: [adminId], references: [id])
  seat        Int
  description String
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Booking     Booking[]
  Reviews     Reviews[]
}

enum CurrentStatus {
  Available
  Sold_Out
}

model Booking {
  id                  String             @id @default(uuid())
  UserId              String
  User                User               @relation(fields: [UserId], references: [id])
  TravelDestinationId String
  TravelDestination   TravelDestinations @relation(fields: [TravelDestinationId], references: [id])
  Number_Traveler     Int
  BookingStatus       BookingStatus      @default(Booked)
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}

enum BookingStatus {
  Booked
  Confirmed
  Rejected
  Canceled
}

model Reviews {
  id                  String             @id @default(uuid())
  Ratting             Int
  Comment             String
  UserId              String
  User                User               @relation(fields: [UserId], references: [id])
  TravelDestinationId String
  TravelDestination   TravelDestinations @relation(fields: [TravelDestinationId], references: [id])
  createdAt           DateTime           @default(now())
  updatedAt           DateTime           @updatedAt
}
